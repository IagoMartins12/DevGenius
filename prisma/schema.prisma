// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String?
  secondName      String?
  username        String?   @unique
  email           String?   @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  createdAt       DateTime  @default(now())
  role            Int       @default(0)
  bio             String?
  gender          String? 
  birthday        DateTime?

  Post     Post[]
  Account  Account[]
  Comment  Comment[]
  Like     Like[]
  Deslike  Deslike[]
  Favorite Favorite[]
  UserNetwork UserNetwork[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  author           String?
  title            String
  content          String
  resume           String?
  photo_background String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  featured         Int      @default(0)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  Category CategoryRelationsPosts[]
  Comment  Comment[]
  Like     Like[]
  Deslike  Deslike[]
  Favorite Favorite[]
}

model SocialNetwork {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  network_name  String

  userNetworks  UserNetwork[]
}

model UserNetwork {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  networkId       String          @db.ObjectId

  user            User            @relation(fields: [userId], references: [id])
  socialNetwork   SocialNetwork   @relation(fields: [networkId], references: [id], onDelete: Cascade)
}
model Category {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  category_name String

  CategoryRelationsPosts CategoryRelationsPosts[]
}

model CategoryRelationsPosts { 
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryId    String    @db.ObjectId
  postId        String    @db.ObjectId

  post     Post     @relation(fields: [postId], references: [id])
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Deslike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Favorite {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
